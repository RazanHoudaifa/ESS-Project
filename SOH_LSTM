import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import LSTM, Dense
import matplotlib.pyplot as plt
import seaborn as sns
import math
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Load the dataset
file_path = './content/B05_discharge_soh.csv' 
dataset = pd.read_csv(file_path)

# Assuming the structure is the same as before, prepare the data
features = ['terminal_voltage', 'terminal_current', 'temperature', 'charge_current', 'charge_voltage', 'cycle']
X = dataset['cycle'].values
X.reshape(-1, 1)
y = dataset['SOH'].values


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

# Reshape the input to be [samples, time steps, features] which is required for LSTM
X_train = X_train.reshape((X_train.shape[0], 1))
X_test = X_test.reshape((X_test.shape[0], 1))

# Define the LSTM model
model = Sequential()
model.add(LSTM(64, input_shape=(1, 1)))
model.add(LSTM(64, input_shape=(1, 1)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')

# Train the model
history = model.fit(X_train, y_train, epochs=50, batch_size=64, validation_data=(X_test, y_test), verbose=2)

# Plot training and validation loss
plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Test Loss')
plt.legend()
plt.show()

# Make predictions
yhat_train = model.predict(X_train).flatten()
yhat_test = model.predict(X_test).flatten()

# Calculate and print RMSE and MAE for the test set
rmse_test = math.sqrt(mean_squared_error(y_test, yhat_test))
mae_test = mean_absolute_error(y_test, yhat_test)
print(f'Test RMSE: {rmse_test:.3f}')
print(f'Test MAE: {mae_test:.3f}')

cycle_train = dataset['cycle'].values[:len(y_train)]
cycle_test = dataset['cycle'].values[len(y_train):]
cycle_train_pred = dataset['cycle'].values[:len(yhat_train)]
cycle_test_pred = dataset['cycle'].values[len(y_train):]
cycle_train = dataset['cycle'].values[:len(y_train)]
cycle_test = dataset['cycle'].values[len(y_train):]
cycle_train_pred = dataset['cycle'].values[:len(yhat_train)]
cycle_test_pred = dataset['cycle'].values[len(y_train):]
# Plotting predictions and real data
sns.set_style("darkgrid")
plt.figure(figsize=(12, 8))

# Plot training data
plt.plot(cycle_train, y_train, label='Real Data (Train)', linewidth=3, color='r')

# Plot testing data
plt.plot(cycle_test, y_test, label='Real Data (Test)', linewidth=3, color='b')

# Plot training predictions
plt.plot(cycle_train_pred, yhat_train, label='LSTM Prediction (Train)', linestyle='--', color='g')

# Plot testing predictions
plt.plot(cycle_test_pred, yhat_test, label='LSTM Prediction (Test)', linestyle='--', color='m')


# Plot training data
plt.plot(cycle_train, y_train, label='Real Data (Train)', linewidth=3, color='r')

# Plot testing data
plt.plot(cycle_test, y_test, label='Real Data (Test)', linewidth=3, color='b')

# Plot training predictions
plt.plot(cycle_train_pred, yhat_train, label='LSTM Prediction (Train)', linestyle='--', color='g')

# Plot testing predictions
plt.plot(cycle_test_pred, yhat_test, label='LSTM Prediction (Test)', linestyle='--', color='m')

plt.legend(prop={'size': 16})
plt.ylabel('SoH', fontsize=15)
plt.xlabel('Cycle', fontsize=15)
plt.xlabel('Cycle', fontsize=15)
plt.title("SOH Prediction with LSTM", fontsize=15)
plt.tight_layout()
plt.show()
